generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id              String               @id @default(cuid())
  email           String               @unique
  password        String
  name            String
  role            Role                 @default(USER)
  powerLevel      Int                  @default(1)
  status          String               @default("ACTIVE")
  emailVerified   DateTime?            @map("email_verified")
  image           String?
  schoolId        String?
  teacherId       String?
  avatar          String?
  bio             String?
  subjects        String?
  education       String?
  experience      String?
  phoneNumber     String?
  officeHours     String?
  isPro           Boolean              @default(false)
  proSubscriptionId String?
  proExpiresAt    DateTime?
  proType         String?
  proStatus       String?
  proPlan         String?
  proPlanId       String?
  proPlanName     String?
  proPlanPrice    Float?
  proPlanCurrency String?
  proPlanInterval String?
  proPlanTrialPeriodDays Int?
  proPlanIsActive Boolean?
  proPlanIsTrial  Boolean?
  proPlanStartedAt DateTime?
  proPlanEndedAt  DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  accounts        Account[]
  assignments     Assignment[]         @relation("TeacherAssignments")
  teachingClasses Class[]              @relation("TeacherClasses")
  classesTeaching ClassTeacher[]
  submissions     HomeworkSubmission[] @relation("StudentSubmissions")
  practiceQuizzes PracticeQuiz[]
  sessions        Session[]
  activities      UserActivity[]
  school          School?              @relation(fields: [schoolId], references: [id])
  teacher         User?                @relation("TeacherToStudent", fields: [teacherId], references: [id])
  students        User[]               @relation("TeacherToStudent")
  enrolledClasses Class[]              @relation("StudentClasses")
  stripeSessions  StripeSession[]
  quizSubmissions QuizSubmission[]
  @@index([schoolId])
  @@index([teacherId])
  @@map("users")
}

model School {
  id          String   @id @default(cuid())
  name        String
  roleNumber  String   @unique
  description String?
  address     String?
  city        String?
  state       String?
  country     String?
  zip         String?
  phone       String?
  email       String?
  website     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  classes     Class[]
  users       User[]

  @@map("schools")
}

model Class {
  id            String               @id @default(cuid())
  name          String
  description   String?
  schoolId      String
  teacherId     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  school        School              @relation(fields: [schoolId], references: [id])
  teacher       User                @relation("TeacherClasses", fields: [teacherId], references: [id])
  classTeachers ClassTeacher[]
  students      User[]              @relation("StudentClasses")
  assignments   Assignment[]        @relation("ClassAssignments")

  @@index([schoolId])
  @@index([teacherId])
}

model ClassTeacher {
  id        String   @id @default(cuid())
  classId   String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  class     Class    @relation(fields: [classId], references: [id])
  teacher   User     @relation(fields: [teacherId], references: [id])

  @@index([classId])
  @@index([teacherId])
}

model Assignment {
  id            String                 @id @default(cuid())
  title         String
  description   String?
  classId       String
  teacherId     String
  dueDate       DateTime?
  status        String                @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  points        Int                   @default(100)
  weight        Int                   @default(100)
  totalMarks    Int                   @default(100)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
  class         Class                 @relation("ClassAssignments", fields: [classId], references: [id])
  teacher       User                  @relation("TeacherAssignments", fields: [teacherId], references: [id])
  attachments   AssignmentAttachment[]
  questions     Question[]
  submissions   HomeworkSubmission[]

  @@index([classId])
  @@index([teacherId])
}

model AssignmentAttachment {
  id           String     @id @default(cuid())
  assignmentId String
  name         String
  url          String
  type         String
  size         Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@index([assignmentId])
}

model Question {
  id                String               @id @default(cuid())
  assignmentId      String
  type             String               // MCQ, SHORT_ANSWER, LONG_ANSWER
  text             String
  question         String               @default("")
  options          Json?                // For MCQ
  correctAnswer    String?
  correctAnswerIndex Int?
  points           Int                  @default(1)
  marks            Int                  @default(1)
  order            Int
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now()) @updatedAt
  assignment       Assignment           @relation(fields: [assignmentId], references: [id])
  submissions      QuestionSubmission[]

  @@index([assignmentId])
}

model QuestionSubmission {
  id          String    @id @default(cuid())
  questionId  String
  submissionId String
  answer      String?
  score       Int?
  feedback    String?
  isCorrect   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  question    Question  @relation(fields: [questionId], references: [id])
  submission  HomeworkSubmission @relation(fields: [submissionId], references: [id])

  @@index([questionId])
  @@index([submissionId])
}

model HomeworkSubmission {
  id           String               @id @default(cuid())
  assignmentId String
  studentId    String
  status       String               @default("PENDING") // PENDING, SUBMITTED, GRADED
  score        Float?
  feedback     String?
  grade        String?
  submittedAt  DateTime?
  content      String?
  files        Json?
  metadata     Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now()) @updatedAt
  assignment   Assignment           @relation(fields: [assignmentId], references: [id])
  student      User                 @relation("StudentSubmissions", fields: [studentId], references: [id])
  answers      QuestionSubmission[]

  @@index([assignmentId])
  @@index([studentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PracticeQuiz {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String?
  description String?
  questions   Json
  metadata    Json?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([userId])
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String?
  details     String?
  metadata    Json?
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SystemSettings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("UNREAD")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model StripeSession {
  id            String   @id
  userId        String
  status        String
  customerEmail String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@map("stripe_sessions")
}

model Quiz {
  id          String    @id @default(cuid())
  title       String    @unique
  description String    @default("")
  subject     String    @default("")
  topic       String    @default("")
  difficulty  String    @default("EASY")
  isPremium   Boolean   @default(false)
  published   Boolean   @default(true)
  totalQuestions Int    @default(0)
  timeLimit   Int       @default(10) // in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  questions   QuizQuestion[]
  submissions QuizSubmission[]

  @@index([subject])
  @@index([topic])
}

model QuizQuestion {
  id            String    @id @default(cuid())
  quizId        String
  question      String    @default("")
  options       Json      // Array of strings
  correctAnswer String    @default("")
  explanation   String?
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       QuizAnswer[]

  @@unique([quizId, order])
}

model QuizSubmission {
  id            String    @id @default(cuid())
  userId        String
  quizId        String
  score         Float     @default(0)
  totalCorrect  Int       @default(0)
  timeTaken     Int       @default(0) // in seconds
  completedAt   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       QuizAnswer[]
}

model QuizAnswer {
  id            String    @id @default(cuid())
  questionId    String
  submissionId  String
  answer        String    @default("")
  isCorrect     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  question      QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission    QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  PROUSER
  STUDENT
  TEACHER
  SCHOOLADMIN
  ADMIN
  SUPERADMIN
}
