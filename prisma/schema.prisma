generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id              String               @id @default(cuid())
  email           String               @unique
  password        String
  name            String
  role            String
  powerLevel      Int                  @default(1)
  status          String               @default("ACTIVE")
  emailVerified   DateTime?            @map("email_verified")
  image           String?
  schoolId        String?
  teacherId       String?
  avatar          String?
  bio             String?
  subjects        String?
  education       String?
  experience      String?
  phoneNumber     String?
  officeHours     String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  accounts        Account[]
  assignments     Assignment[]         @relation("TeacherAssignments")
  teachingClasses Class[]              @relation("TeacherClasses")
  classesTeaching ClassTeacher[]
  submissions     HomeworkSubmission[] @relation("StudentSubmissions")
  practiceQuizzes PracticeQuiz[]
  sessions        Session[]
  activities      UserActivity[]
  school          School?              @relation(fields: [schoolId], references: [id])
  teacher         User?                @relation("TeacherToStudent", fields: [teacherId], references: [id])
  students        User[]               @relation("TeacherToStudent")
  enrolledClasses Class[]              @relation("StudentClasses")

  @@index([schoolId])
  @@index([teacherId])
  @@map("users")
}

model School {
  id          String   @id @default(cuid())
  name        String
  roleNumber  String   @unique
  description String?
  address     String?
  city        String?
  state       String?
  country     String?
  zip         String?
  phone       String?
  email       String?
  website     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  classes     Class[]
  users       User[]

  @@map("schools")
}

model Class {
  id            String               @id @default(cuid())
  name          String
  description   String?
  schoolId      String
  teacherId     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  school        School              @relation(fields: [schoolId], references: [id])
  teacher       User                @relation("TeacherClasses", fields: [teacherId], references: [id])
  classTeachers ClassTeacher[]
  students      User[]              @relation("StudentClasses")
  assignments   Assignment[]        @relation("ClassAssignments")

  @@index([schoolId])
  @@index([teacherId])
}

model ClassTeacher {
  id        String   @id @default(cuid())
  classId   String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  class     Class    @relation(fields: [classId], references: [id])
  teacher   User     @relation(fields: [teacherId], references: [id])

  @@index([classId])
  @@index([teacherId])
}

model Assignment {
  id            String                 @id @default(cuid())
  title         String
  description   String?
  classId       String
  teacherId     String
  dueDate       DateTime?
  status        String                @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  totalMarks    Int                   @default(100)
  points        Int                   @default(100)
  weight        Int                   @default(100)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
  class         Class                 @relation("ClassAssignments", fields: [classId], references: [id])
  teacher       User                  @relation("TeacherAssignments", fields: [teacherId], references: [id])
  attachments   AssignmentAttachment[]
  questions     Question[]
  submissions   HomeworkSubmission[]

  @@index([classId])
  @@index([teacherId])
}

model AssignmentAttachment {
  id           String     @id @default(cuid())
  assignmentId String
  name         String
  url          String
  type         String
  size         Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@index([assignmentId])
}

model Question {
  id            String               @id @default(cuid())
  assignmentId  String
  type          String               // MCQ, SHORT_ANSWER, LONG_ANSWER
  text          String
  question      String               @default("")
  options       Json?                // For MCQ
  correctAnswer String?
  correctAnswerIndex Int?
  points        Int                  @default(1)
  marks         Int                  @default(1)
  order         Int
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now()) @updatedAt
  assignment    Assignment           @relation(fields: [assignmentId], references: [id])
  submissions   QuestionSubmission[]

  @@index([assignmentId])
}

model HomeworkSubmission {
  id           String               @id @default(cuid())
  assignmentId String
  studentId    String
  status       String               @default("SUBMITTED") // DRAFT, SUBMITTED, GRADED
  grade        Float?
  feedback     String?
  content      String?
  files        Json?
  submittedAt  DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now()) @updatedAt
  assignment   Assignment           @relation(fields: [assignmentId], references: [id])
  student      User                 @relation("StudentSubmissions", fields: [studentId], references: [id])
  answers      QuestionSubmission[]

  @@index([assignmentId])
  @@index([studentId])
}

model QuestionSubmission {
  id           String             @id @default(cuid())
  questionId   String
  submissionId String
  answer       String
  isCorrect    Boolean?
  points       Float?
  score        Float?
  feedback     String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt
  question     Question           @relation(fields: [questionId], references: [id])
  submission   HomeworkSubmission @relation(fields: [submissionId], references: [id])

  @@index([questionId])
  @@index([submissionId])
}

model PracticeQuiz {
  id          String             @id @default(cuid())
  userId      String
  title       String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt
  questions   PracticeQuestion[]
  user        User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PracticeQuestion {
  id            String       @id @default(cuid())
  quizId        String
  type          String      // MCQ, SHORT_ANSWER, LONG_ANSWER
  text          String
  options       Json?       // For MCQ
  correctAnswer String?
  explanation   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  quiz          PracticeQuiz @relation(fields: [quizId], references: [id])

  @@index([quizId])
}

model SystemSettings {
  id                String   @id @default(cuid())
  maintenanceMode   Boolean  @default(false)
  maintenanceMessage String?
  registrationOpen  Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String
  message     String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
