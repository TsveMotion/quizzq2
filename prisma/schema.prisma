generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum Role {
  USER
  TEACHER
  ADMIN
  SUPERADMIN
}

model User {
  id              String               @id @default(cuid())
  email           String               @unique
  password        String?              // Made optional for OAuth users
  name            String
  role            Role                 @default(USER)
  powerLevel      Int                  @default(1)
  status          String               @default("ACTIVE")
  emailVerified   DateTime?            @map("email_verified")
  image           String?
  schoolId        String?
  teacherId       String?
  avatar          String?
  bio             String?
  subjects        String?
  education       String?
  experience      String?
  phoneNumber     String?
  officeHours     String?
  
  // Subscription fields
  subscriptionStatus String           @default("inactive")
  subscriptionPlan   String           @default("free")
  subscriptionId     String?
  subscriptionEndDate DateTime?
  
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  accounts        Account[]
  assignments     Assignment[]         @relation("TeacherAssignments")
  teachingClasses Class[]              @relation("TeacherClasses")
  classesTeaching ClassTeacher[]
  submissions     HomeworkSubmission[] @relation("StudentSubmissions")
  practiceQuizzes PracticeQuiz[]
  sessions        Session[]
  activities      UserActivity[]
  school          School?              @relation(fields: [schoolId], references: [id])
  teacher         User?                @relation("TeacherToStudent", fields: [teacherId], references: [id])
  students        User[]               @relation("TeacherToStudent")
  enrolledClasses Class[]              @relation("StudentClasses")
  stripeSessions  StripeSession[]
  quizSubmissions QuizSubmission[]
  blogPosts       BlogPost[]           // Added for blog functionality
  likedPosts      BlogPostLike[]       // Added for blog functionality
  quizzes         AIQuiz[]             // Added for quiz functionality
  quizAttempts    AIQuizAttempt[]      // Added for quiz attempts

  @@index([schoolId])
  @@index([teacherId])
  @@map("users")
}

model School {
  id          String   @id @default(cuid())
  name        String
  roleNumber  String   @unique
  description String?
  address     String?
  city        String?
  state       String?
  country     String?
  zip         String?
  phone       String?
  email       String?
  website     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  classes     Class[]  @relation
  users       User[]

  @@map("schools")
}

model Class {
  id            String   @id @default(cuid())
  name          String
  description   String?
  schoolId      String
  teacherId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  
  school        School   @relation(fields: [schoolId], references: [id])
  teacher       User     @relation("TeacherClasses", fields: [teacherId], references: [id])
  classTeachers ClassTeacher[]
  students      User[]   @relation("StudentClasses")
  assignments   Assignment[]

  @@index([schoolId])
  @@index([teacherId])
}

model ClassTeacher {
  id        String   @id @default(cuid())
  classId   String
  teacherId String
  role      String   @default("ASSISTANT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  class     Class    @relation(fields: [classId], references: [id])
  teacher   User     @relation(fields: [teacherId], references: [id])

  @@unique([classId, teacherId])
  @@index([classId])
  @@index([teacherId])
}

model Assignment {
  id            String                 @id @default(cuid())
  title         String
  description   String?
  classId       String
  teacherId     String
  dueDate       DateTime?
  status        String                @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  points        Int                   @default(100)
  weight        Int                   @default(100)
  totalMarks    Int                   @default(100)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
  class         Class                 @relation(fields: [classId], references: [id])
  teacher       User                  @relation("TeacherAssignments", fields: [teacherId], references: [id])
  attachments   AssignmentAttachment[]
  questions     Question[]
  submissions   HomeworkSubmission[]

  @@index([classId])
  @@index([teacherId])
}

model HomeworkSubmission {
  id           String               @id @default(cuid())
  assignmentId String
  studentId    String
  status       String               @default("PENDING") // PENDING, SUBMITTED, GRADED
  score        Float?
  feedback     String?
  grade        String?
  submittedAt  DateTime?
  content      String?
  files        Json?
  metadata     Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now()) @updatedAt
  assignment   Assignment           @relation(fields: [assignmentId], references: [id])
  student      User                 @relation("StudentSubmissions", fields: [studentId], references: [id])
  answers      QuestionSubmission[]

  @@index([assignmentId])
  @@index([studentId])
}

model AssignmentAttachment {
  id           String     @id @default(cuid())
  assignmentId String
  name         String
  url          String
  type         String
  size         Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@index([assignmentId])
}

model Question {
  id               String               @id @default(cuid())
  assignmentId     String
  type            String               @default("MULTIPLE_CHOICE")
  question        String
  options         Json?
  correctAnswer   String?
  points          Int                  @default(1)
  order           Int                  @default(0)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  assignment      Assignment           @relation(fields: [assignmentId], references: [id])
  submissions     QuestionSubmission[]

  @@index([assignmentId])
}

model QuestionSubmission {
  id           String   @id @default(cuid())
  questionId   String
  submissionId String
  answer       String?
  score        Float?
  feedback     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  
  question     Question           @relation(fields: [questionId], references: [id])
  submission   HomeworkSubmission @relation(fields: [submissionId], references: [id])

  @@index([questionId])
  @@index([submissionId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PracticeQuiz {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String?
  description String?
  questions   Json
  metadata    Json?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([userId])
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String?
  details     String?
  metadata    Json?
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SystemSettings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("UNREAD")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model StripeSession {
  id            String   @id
  userId        String
  status        String
  customerEmail String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@map("stripe_sessions")
}

model AIQuiz {
  id            String           @id @default(cuid())
  title         String
  topic         String
  difficulty    String          @default("medium")
  questions     AIQuizQuestion[]
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  attempts      AIQuizAttempt[]
  submissions   QuizSubmission[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([userId])
}

model AIQuizQuestion {
  id            String               @id @default(cuid())
  question      String
  options       String[]
  correctAnswer String
  explanation   String
  quizId        String
  quiz          AIQuiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AIQuizAnswerAttempt[]
  quizAnswers   AIQuizAnswer[]

  @@index([quizId])
}

model AIQuizAttempt {
  id          String               @id @default(cuid())
  quizId      String
  quiz        AIQuiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId      String
  user        User                @relation(fields: [userId], references: [id])
  score       Int
  answers     AIQuizAnswerAttempt[]
  completedAt DateTime            @default(now())

  @@index([userId])
  @@index([quizId])
}

model AIQuizAnswerAttempt {
  id            String         @id @default(cuid())
  questionId    String
  question      AIQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attemptId     String
  attempt       AIQuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  selectedAnswer String
  isCorrect     Boolean

  @@index([questionId])
  @@index([attemptId])
}

model QuizSubmission {
  id            String        @id @default(cuid())
  userId        String
  quizId        String
  score         Float         @default(0)
  totalCorrect  Int          @default(0)
  timeTaken     Int          @default(0) // in seconds
  completedAt   DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          AIQuiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AIQuizAnswer[]

  @@index([userId])
  @@index([quizId])
}

model AIQuizAnswer {
  id            String        @id @default(cuid())
  questionId    String
  submissionId  String
  answer        String       @default("")
  isCorrect     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  question      AIQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission    QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([submissionId])
}

model BlogPost {
  id         String         @id @default(cuid())
  title      String
  content    String        @db.Text
  coverImage String?
  likes      Int           @default(0)
  views      Int           @default(0)
  tags       String[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  authorId   String
  author     User          @relation(fields: [authorId], references: [id])
  likedBy    BlogPostLike[]
  comments   Comment[]

  @@index([authorId])
}

model BlogPostLike {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@index([userId])
  @@index([postId])
}

model Comment {
  id          String    @id @default(cuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  postId      String
  post        BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes       Int       @default(0)
  parentId    String?   // For nested comments
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  isAnonymous Boolean   @default(false)
  authorHash  String?   // Hash to identify anonymous authors while keeping them anonymous

  @@index([postId])
  @@index([parentId])
}

model AnonymousChat {
  id          String    @id @default(cuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  authorHash  String    // Hash to identify anonymous authors while keeping them anonymous
  roomId      String    // To group chats by discussion/topic
  likes       Int       @default(0)
  replyTo     String?   // ID of the message being replied to
  
  @@index([roomId])
  @@index([authorHash])
}

model ChatRoom {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  isArchived  Boolean   @default(false)
  lastActive  DateTime  @default(now())
}
