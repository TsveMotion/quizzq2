// This is your Prisma schema file
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        String    // student, teacher, admin
  powerLevel  Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  schoolId    String?
  teacherId   String?
  school      School?   @relation(fields: [schoolId], references: [id])
  teacher     User?     @relation("TeacherToStudent", fields: [teacherId], references: [id])
  students    User[]    @relation("TeacherToStudent")
  teacherOf   Class[]   @relation("TeacherToClass")
  enrolledIn  Class[]   @relation("StudentToClass")
  practiceQuizzes PracticeQuiz[]
  assignments Assignment[] @relation("TeacherAssignments")
  submissions HomeworkSubmission[] @relation("StudentSubmissions")

  @@index([schoolId])
  @@index([teacherId])
}

model School {
  id           String    @id @default(cuid())
  name         String
  roleNumber   String    @unique // Random role number for school authentication
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]    // All users associated with this school
  classes      Class[]   // All classes in this school
}

model Class {
  id          String       @id @default(cuid())
  name        String
  description String?
  school      School       @relation(fields: [schoolId], references: [id])
  schoolId    String
  teacher     User         @relation("TeacherToClass", fields: [teacherId], references: [id])
  teacherId   String
  students    User[]       @relation("StudentToClass")
  assignments Assignment[] @relation("ClassAssignments")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  content     String       @default("") // Original AI response if needed
  dueDate     DateTime
  class       Class        @relation("ClassAssignments", fields: [classId], references: [id])
  classId     String
  teacher     User         @relation("TeacherAssignments", fields: [teacherId], references: [id])
  teacherId   String
  submissions HomeworkSubmission[]
  questions   QuizQuestion[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model QuizQuestion {
  id                String     @id @default(cuid())
  question          String
  options           String     // JSON array of options
  correctAnswerIndex Int
  explanation       String
  assignment        Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId      String
  submissions       QuestionSubmission[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model QuestionSubmission {
  id           String       @id @default(cuid())
  question     QuizQuestion @relation(fields: [questionId], references: [id])
  questionId   String
  submission   HomeworkSubmission @relation(fields: [submissionId], references: [id])
  submissionId String
  answer       Int          // Student's answer (0-3)
  isCorrect    Boolean
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([questionId, submissionId])
}

model HomeworkSubmission {
  id           String     @id @default(cuid())
  content      String?    // Optional general comments
  grade        Int?       // Optional grade (0-100)
  feedback     String?    // Teacher's feedback
  student      User       @relation("StudentSubmissions", fields: [studentId], references: [id])
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  answers      QuestionSubmission[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([studentId, assignmentId])
}

model PracticeQuiz {
  id          String            @id @default(cuid())
  subject     String
  topic       String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  studentId   String
  student     User             @relation(fields: [studentId], references: [id])
  questions   PracticeQuestion[]
}

model PracticeQuestion {
  id             String       @id @default(cuid())
  question       String
  optionsJson    String      // Store options as JSON string
  correctOption  Int
  practiceQuizId String
  practiceQuiz   PracticeQuiz @relation(fields: [practiceQuizId], references: [id])
}
