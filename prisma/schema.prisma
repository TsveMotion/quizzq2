// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        String    // student, teacher, admin
  powerLevel  Int       @default(1)
  status      String    @default("active") // active, inactive
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  schoolId    String?
  teacherId   String?
  
  // Profile fields
  avatar      String?   // URL to avatar image
  bio         String?   // Teacher's biography
  subjects    String?   // JSON array of subjects they teach
  education   String?   // Educational background
  experience  String?   // Years of teaching experience
  phoneNumber String?   // Contact number
  officeHours String?   // JSON array of office hours
  
  school      School?   @relation(fields: [schoolId], references: [id])
  teacher     User?     @relation("TeacherToStudent", fields: [teacherId], references: [id])
  students    User[]    @relation("TeacherToStudent")
  teachingClasses Class[] @relation("TeacherClasses")
  classesTeaching ClassTeacher[]
  enrolledClasses Class[] @relation("StudentClasses")
  practiceQuizzes PracticeQuiz[]
  assignments Assignment[] @relation("TeacherAssignments")
  submissions HomeworkSubmission[] @relation("StudentSubmissions")
  activities   UserActivity[]
  
  @@index([schoolId])
  @@index([teacherId])
}

model School {
  id           String    @id @default(cuid())
  name         String
  roleNumber   String    @unique // Random role number for school authentication
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]
  classes      Class[]
}

model Class {
  id          String       @id @default(cuid())
  name        String
  description String?
  schoolId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  school      School       @relation(fields: [schoolId], references: [id])
  teacherId   String
  teacher     User         @relation("TeacherClasses", fields: [teacherId], references: [id])
  classTeachers ClassTeacher[]
  students    User[]       @relation("StudentClasses")
  assignments Assignment[] @relation("ClassAssignments")

  @@index([schoolId])
  @@index([teacherId])
}

model ClassTeacher {
  id        String   @id @default(cuid())
  classId   String
  teacherId String
  class     Class    @relation(fields: [classId], references: [id])
  teacher   User     @relation(fields: [teacherId], references: [id])
  createdAt DateTime @default(now())

  @@unique([classId, teacherId])
  @@index([classId])
  @@index([teacherId])
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String?      // Assignment description (optional)
  content     String       @default("") // Original AI response if needed
  dueDate     DateTime
  classId     String
  teacherId   String
  weight      Int         @default(100)  // Assignment weight for grade calculation
  totalMarks  Int         @default(100)  // Total marks for the assignment
  class       Class        @relation("ClassAssignments", fields: [classId], references: [id])
  teacher     User         @relation("TeacherAssignments", fields: [teacherId], references: [id])
  submissions HomeworkSubmission[]
  questions   QuizQuestion[]
  attachments AssignmentAttachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model AssignmentAttachment {
  id           String     @id @default(cuid())
  fileName     String
  fileType     String
  url          String
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([assignmentId])
}

model QuizQuestion {
  id                String     @id @default(cuid())
  question          String
  options           String     // JSON array of options
  correctAnswerIndex Int
  explanation       String
  marks           Int          @default(10)  // Marks for this question
  assignmentId      String
  assignment        Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submissions       QuestionSubmission[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model QuestionSubmission {
  id           String       @id @default(cuid())
  questionId   String
  question     QuizQuestion @relation(fields: [questionId], references: [id])
  submissionId String
  submission   HomeworkSubmission @relation(fields: [submissionId], references: [id])
  answer       Int          // Student's answer (0-3)
  isCorrect    Boolean
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([questionId, submissionId])
}

model HomeworkSubmission {
  id          String       @id @default(cuid())
  status      String      // "submitted", "graded"
  content     String?     // Optional general comments
  grade       Int?        // Optional grade (0-100)
  feedback    String?     // Teacher's feedback
  files       String?     // JSON array of file URLs
  studentId   String
  student     User        @relation("StudentSubmissions", fields: [studentId], references: [id])
  assignmentId String
  assignment  Assignment  @relation(fields: [assignmentId], references: [id])
  answers     QuestionSubmission[]
  submittedAt DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model PracticeQuiz {
  id          String    @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  questions   PracticeQuestion[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PracticeQuestion {
  id             String       @id @default(cuid())
  question       String
  optionsJson    String      // Store options as JSON string
  correctOption  Int
  explanation    String?
  practiceQuizId String
  practiceQuiz   PracticeQuiz @relation(fields: [practiceQuizId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  schoolName  String
  name        String
  email       String
  role        String
  message     String
  status      String    @default("pending") // pending, contacted, resolved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   
  status    String   @default("PENDING") // PENDING, RESPONDED, ARCHIVED
  notes     String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemSettings {
  id                String   @id @default(cuid())
  maintenanceMode  Boolean  @default(false)
  maintenanceMessage String? 
  updatedAt        DateTime @updatedAt
  updatedBy        String?
  createdAt        DateTime @default(now())
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String   // e.g., 'login', 'logout', 'view_class', etc.
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
}
